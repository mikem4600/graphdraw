/*
* ============================================================================
*  Name     : CGraphDrawView2 from GraphDrawView2.h
*  Part of  : GraphDraw
*  Created  : 3/7/2003 by Makidis Michael
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Michael 2003-2004
* ============================================================================
*/

// INCLUDE FILES
#include "GraphDrawView2.h"
#include "GraphDrawListbox.h"
#include "GraphDrawDocument.h"
#include "GraphDrawContainer2.h"
#include "GraphDraw.hrh"
#include <GraphDraw.rsg>
#include <avkon.hrh>
#include <aknviewappui.h>
#include <aknview.h>
#include <stringloader.h>  // for StringLoader
#include <aknnotewrappers.h> // for note

// ================= MEMBER FUNCTIONS =======================

CGraphDrawView2::CGraphDrawView2(CGraphDrawDocument *aDocument)
:	iValidate ( ETrue ), iContainer(NULL), iDocument(aDocument)
{

}

// ---------------------------------------------------------
// CGraphDrawView2::ConstructL(const TRect& aRect)
// EPOC two-phased constructor
// ---------------------------------------------------------
//
void CGraphDrawView2::ConstructL()
    {
    BaseConstructL( R_GRAPHDRAW_VIEW2 );
    }

// ---------------------------------------------------------
// CGraphDrawView2::~CGraphDrawView2()
// ?implementation_description
// ---------------------------------------------------------
//
CGraphDrawView2::~CGraphDrawView2()
    {
    if ( iContainer )
        {
        AppUi()->RemoveFromViewStack( *this, iContainer );
		delete iContainer;
		iContainer = NULL;
        }

	if (iListBox)
		{
		AppUi()->RemoveFromStack(iListBox);
		delete iListBox;
		iListBox = NULL;
		}

    }

// ---------------------------------------------------------
// TUid CGraphDrawView2::Id()
// ?implementation_description
// ---------------------------------------------------------
//
TUid CGraphDrawView2::Id() const
    {
    return KView2Id;
    }

// ---------------------------------------------------------
// CGraphDrawView2::HandleCommandL(TInt aCommand)
// ?implementation_description
// ---------------------------------------------------------
//
void CGraphDrawView2::HandleCommandL(TInt aCommand)
    {

	switch ( aCommand )
        {
		case EAknSoftkeyDone:
        case EAknSoftkeyBack:
            {
            AppUi()->HandleCommandL(EGraphDrawReturnToGraph);
            break;
            }
		case EGraphDrawValidate:
			{
			// validate & save
			TBool error = EFalse;
			TBuf<ERRORMESSAGEMAXLENGTH> errorMessage;
			ValidateDataL(error, errorMessage);
			if(error)
				DisplayMessageL(errorMessage);
			break;
			}
		case EGraphDrawChange:
			{
			// switch to edit mode
			iListBox->EditItemL(iListBox->ListBox()->CurrentItemIndex(), ETrue);
			}
        default:
            {
            AppUi()->HandleCommandL( aCommand );
            break;
            }
        }
    }

// ---------------------------------------------------------
// CGraphDrawView2::HandleClientRectChange()
// ---------------------------------------------------------
//
void CGraphDrawView2::HandleClientRectChange()
    {
    if ( iContainer )
        {
        iContainer->SetRect( ClientRect() );
        }
    }

// ---------------------------------------------------------
// CGraphDrawView2::DoActivateL(...)
// ?implementation_description
// ---------------------------------------------------------
//
void CGraphDrawView2::DoActivateL(
   const TVwsViewId& /*aPrevViewId*/,TUid /*aCustomMessageId*/,
   const TDesC8& /*aCustomMessage*/)
    {
    if (!iContainer)
        {
        iContainer = new (ELeave) CGraphDrawContainer2(iDocument);
        iContainer->SetMopParent(this);
        iContainer->ConstructL( ClientRect(), this );
        AppUi()->AddToStackL( *this, iContainer );
        }
	CreateListBoxL(R_AKNSETTINGLIST_SETTING_LIST_SETTING_TEXT);
   }


void CGraphDrawView2::CreateListBoxL(TInt aResourceId)
    {
    if (iListBox)
        {
        AppUi()->RemoveFromStack(iListBox);
        }
    delete iListBox;
    iListBox = NULL;

    iListBox = new (ELeave) CGraphDrawListbox();
    //Populate with the data
	iListBox->iFuncF = iDocument->Function(0);
	iListBox->iFuncG = iDocument->Function(1);
	iListBox->iFuncH = iDocument->Function(2);
	iListBox->iFuncT = iDocument->Function(3);

	iListBox->iZoom.Num(iDocument->iZoom);
	iListBox->iX.Num(iDocument->iCenter.iX);
	iListBox->iY.Num(iDocument->iCenter.iY);

    iListBox->SetMopParent(this);
    iListBox->ConstructFromResourceL(aResourceId);
    AppUi()->AddToStackL( *this, iListBox );
    iListBox->MakeVisible(ETrue);
    iListBox->SetRect(ClientRect());
    iListBox->ActivateL();
    iListBox->DrawNow();
    }

// ---------------------------------------------------------
// CGraphDrawView2::HandleCommandL(TInt aCommand)
// ?implementation_description
// ---------------------------------------------------------
//
void CGraphDrawView2::DoDeactivate()
    {
	if(iValidate)
	{
		HandleCommandL( EGraphDrawValidate );
	}
	if ( iContainer )
        {
        AppUi()->RemoveFromViewStack( *this, iContainer );
		delete iContainer;
		iContainer = NULL;
        }
    }

void CGraphDrawView2::ValidateDataL(TBool& funcError, TBuf<ERRORMESSAGEMAXLENGTH>& errorMessage)
{
	TInt res = 0; funcError = EFalse;
	
	_LIT(fx, "f(x)");
	_LIT(gx, "g(x)");
	_LIT(hx, "h(x)");
	_LIT(tx, "t(x)");
	_LIT(sep, ", ");

	// load the front part of the error message
	HBufC* textResource = StringLoader::LoadLC(R_VALIDATE_ERROR);
	errorMessage.Append(*textResource);
	CleanupStack::PopAndDestroy(textResource);

	if (!iListBox) return;
	iListBox->StoreSettingsL(); // move the settings to the variables
	// trim the functions
	iListBox->iFuncF.Trim();
	iListBox->iFuncG.Trim();
	iListBox->iFuncH.Trim();
	iListBox->iFuncT.Trim();

	// validate f(x)
	if(!iDocument->SetFunctionL(iListBox->iFuncF, 0))
		{
		errorMessage.Append(fx);
		funcError = ETrue;
		}

	// validate g(x)
	if(!iDocument->SetFunctionL(iListBox->iFuncG, 1))
		{
		if(funcError) errorMessage.Append(sep);
		errorMessage.Append(gx);
		funcError = ETrue;
		}

	// validate h(x)
	if(!iDocument->SetFunctionL(iListBox->iFuncH, 2))
		{
		if(funcError) errorMessage.Append(sep);
		errorMessage.Append(hx);
		funcError = ETrue;
		}

	// validate t(x)
	if(!iDocument->SetFunctionL(iListBox->iFuncT, 3))
		{
		if(funcError) errorMessage.Append(sep);
		errorMessage.Append(tx);
		funcError = ETrue;
		}

	// validate zoom
	if(parseInt(res, iListBox->iZoom) && res > 0)
		iDocument->iZoom = res;
	// validate center-x
	if(parseInt(res, iListBox->iX))
		iDocument->iCenter.iX = res;
	// validate center-y
	if(parseInt(res, iListBox->iY))
		iDocument->iCenter.iY = res;
}

// convert from TBuf<8> to TInt
TBool CGraphDrawView2::parseInt(TInt& anInt, TBuf<8>& aBuf)
{
	TBool neg = EFalse;
	TChar theChar( ' ' );
	TInt theInt = 0;

	for(TInt i = 0; i < aBuf.Length(); i++)
	{
		theChar = aBuf[i];
		if(i == 0 && theChar == '-') neg = ETrue;
		else if(iDocument->IsNumber(theChar))
		{
			theInt = theInt*10 + iDocument->toInt(theChar);
		}
		else return EFalse;
	}
	if(neg) theInt = -theInt;
	anInt = theInt;
	return ETrue;
}

// Display an information note
void CGraphDrawView2::DisplayMessageL(TBuf<ERRORMESSAGEMAXLENGTH>& message)
{
	CAknInformationNote* note = new (ELeave) CAknInformationNote();
	note->ExecuteLD(message);
}

// End of File