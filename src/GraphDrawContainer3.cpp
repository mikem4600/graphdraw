/*
* ============================================================================
*  Name     : CGraphDrawContainer3 from GraphDrawContainer3.cpp
*  Part of  : GraphDraw
*  Created  : 3/7/2003 by Makidis Michael
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Michael 2003-2004
* ============================================================================
*/

// INCLUDE FILES
#include "GraphDrawContainer3.h"
#include "GraphDraw.hrh"
#include <eikedwin.h>      // for CEikEdwin
#include <stringloader.h>  // for StringLoader
#include <GRAPHDRAW.RSG>

// ================= MEMBER FUNCTIONS =======================

// ---------------------------------------------------------
// CGraphDrawContainer3::ConstructL(const TRect& aRect)
// EPOC two phased constructor
// ---------------------------------------------------------
//
void CGraphDrawContainer3::ConstructL(const TRect& aRect)
    {
    CreateWindowL();

	// Create the editor
    iEdwin = new (ELeave) CEikEdwin;
    iEdwin->SetContainerWindowL(*this);
	// Set the flags & construct
	iEdwin->SetAknEditorFlags(
		EAknEditorFlagEnableScrollBars | 
		EAknEditorFlagNoEditIndicators);
	iEdwin->ConstructL( EEikEdwinWidthInPixels |
						EEikEdwinLineCursor |
						EEikEdwinReadOnly |
						EEikEdwinDisplayOnly |
						EEikEdwinOwnsWindow
						, aRect.Width(),1024,7);

	// Load & show the text
	HBufC* textResource = StringLoader::LoadLC(R_GRAPHDRAW_HELP);
	iEdwin->SetTextL(textResource);

	// Enter the line feeds (based on Forum Nokia Discussion topic)
	CPlainText* textStream = iEdwin->Text();
	const TInt KReturnCharNum = {12}; // 12 = ASCII return sign
	TChar ReturnChar( KReturnCharNum );
	//any sign can be used here as long as its not in the resource string.
	TChar secondChar( '%' );
	TInt i( textResource->Length() -2 );
	while( i >= 0 )
	{
		TChar Char = textResource->operator[]( i );
		//if there are any special chars put them back as returns.
		if( Char == secondChar )
		{
			textStream->DeleteL( i, 1 );
			textStream->InsertL( i, ReturnChar );
		}
		i--;
	}
	
	textStream = 0;
	CleanupStack::PopAndDestroy(textResource);

    SetRect(aRect);
    ActivateL();
	iEdwin->SetCursorPosL(0, EFalse);
	iEdwin->SetFocus(ETrue);
    }

// Destructor
CGraphDrawContainer3::~CGraphDrawContainer3()
    {
    delete iEdwin;
    }

// ---------------------------------------------------------
// CGraphDrawContainer3::SizeChanged()
// Called by framework when the view size is changed
// ---------------------------------------------------------
//
void CGraphDrawContainer3::SizeChanged()
    {
    iEdwin->SetExtent(TPoint(0, 0), iEdwin->MinimumSize());
    }

// ---------------------------------------------------------
// CGraphDrawContainer3::CountComponentControls() const
// ---------------------------------------------------------
//
TInt CGraphDrawContainer3::CountComponentControls() const
    {
    return 1; // return nbr of controls inside this container
    }

// ---------------------------------------------------------
// CGraphDrawContainer3::ComponentControl(TInt aIndex) const
// ---------------------------------------------------------
//
CCoeControl* CGraphDrawContainer3::ComponentControl(TInt aIndex) const
    {
    switch ( aIndex )
        {
        case 0:
            return iEdwin;
        default:
            return NULL;
        }
    }

// ---------------------------------------------------------
// CGraphDrawContainer3::Draw(const TRect& aRect) const
// ---------------------------------------------------------
//
void CGraphDrawContainer3::Draw(const TRect& /*aRect*/) const
    {
    CWindowGc& gc = SystemGc();
	gc.Clear();
	// nothing to draw...
    }

// ---------------------------------------------------------
// CGraphDrawContainer3::OfferKeyEventL(...)
// Notify key events to editors.
// ---------------------------------------------------------
//
TKeyResponse CGraphDrawContainer3::OfferKeyEventL(
    const TKeyEvent& aKeyEvent, TEventCode aType)
    {
    if (iEdwin)
        {
        if (aType == EEventKey)
            {
			if (aKeyEvent.iCode == EKeyDownArrow) 
				{
				// move the cursor by 1 line
				iEdwin->MoveCursorL(TCursorPosition::EFLineDown, EFalse);
				return EKeyWasConsumed;
				}
			if (aKeyEvent.iCode == EKeyUpArrow)
				{
				// move the cursor by 1 line
				iEdwin->MoveCursorL(TCursorPosition::EFLineUp, EFalse);
				return EKeyWasConsumed;
				}
            }
        }
    return EKeyWasNotConsumed;
    }

// ---------------------------------------------------------
// CGraphDrawContainer3::HandleControlEventL(
//     CCoeControl* aControl,TCoeEvent aEventType)
// ---------------------------------------------------------
//
void CGraphDrawContainer3::HandleControlEventL(
    CCoeControl* /*aControl*/,TCoeEvent /*aEventType*/)
    {
    // No need to add any control event handler code here
    }

// End of File  
